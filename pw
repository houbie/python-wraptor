#!/usr/bin/env python3

##################################################################################
# Python Wraptor                                                                 #
# https://github.com/houbie/python-wraptor                                       #
#                                                        ___._                   #
#                                                      .'  <0>'-.._              #
#                                                     /  /.--.____")             #
#                                                    |   \   __.-'~              #
#                                                    |  :  -'/                   #
#                                                   /:.  :.-'                    #
#   __________                                     | : '. |                      #
#   '--.____  '--------.______       _.----.-----./      :/                      #
#           '--.__            `'----/       '-.      __ :/                       #
#                 '-.___           :           \   .'  )/                        #
#                       '---._           _.-'   ] /  _/                          #
#                            '-._      _/     _/ / _/                            #
#                                \_ .-'____.-'__< |  \___                        #
#                                  <_______.\    \_\_---.7                       #
#                                 |   /'=r_.-'     _\\ =/                        #
#                             .--'   /            ._/'>                          #
#                           .'   _.-'                                            #
#                          / .--'                                                #
#                         /,/                                                    #
#                         |/`)                                                   #
#                         'c=,                                                   #
#                                                                                #
##################################################################################

import hashlib
import os
import re
import subprocess
import sys
from pathlib import Path

PYPROJECT = Path(__file__).with_name("pyproject.toml")
WRAPTOR_RE = re.compile(r'\[\s*tool.wraptor\s*]')
CACHE_DIR = Path(os.environ.get("PYTHON_WRAPTOR_DIR", Path.home().joinpath('.python-wraptor')), 'cache')

if not PYPROJECT.exists():
    sys.exit("pyproject.toml not found")

if len(sys.argv) < 2:
    sys.exit("usage: pw [command] [args]")


def pyproject_value(tool):
    with open(PYPROJECT, 'r') as toml:
        wraptor_section = False
        for line in toml:
            if not wraptor_section and WRAPTOR_RE.fullmatch(line.strip()):
                wraptor_section = True
            elif wraptor_section:
                match = re.match(fr'[\'"]?{tool}[\'"]?\s*=\s*[\'"]([^\'"]+)', line.strip())
                if match:
                    return match.group(1)
    sys.exit(f"${tool} was not found under [tool.wraptor] in pyproject.toml")


def install_tool(tool):
    pip_args = pyproject_value(tool)
    md5 = hashlib.md5()
    md5.update(pip_args.encode())
    install_dir = Path(CACHE_DIR, md5.hexdigest()).absolute()
    if install_dir.is_dir() and os.listdir(install_dir):
        return install_dir
    install_dir.mkdir(parents=True, exist_ok=True)
    print(f"installing {pip_args} ...")
    subprocess.check_call(f"pip3 install {pip_args} -t install_dir".split())
    return install_dir


cmd, args = sys.argv[1], sys.argv[2:]
tool_dir = install_tool(cmd)
tool_env = os.environ.copy()
if tool_env.get("PYTHONPATH"):
    tool_env["PYTHONPATH"] = os.pathsep.join((str(tool_dir), tool_env.get("PYTHONPATH")))
else:
    tool_env["PYTHONPATH"] = str(tool_dir)
tool_env["PATH"] = os.pathsep.join((str(tool_dir.joinpath('bin')), tool_env["PATH"]))
subprocess.check_call(sys.argv[1:], env=tool_env)
